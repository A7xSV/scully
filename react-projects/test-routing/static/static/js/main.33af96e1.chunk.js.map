{"version":3,"sources":["../../../node_modules/@angular/core/fesm5 lazy groupOptions: {} namespace object","helpers/constants.js","helpers/transfer-state.service.js","components/StyledLabel.js","config.js","modules/Users.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","TRANSFER_STATE_ERRORS","SCULLY_SCRIPT","TransferStateService","initialState","ERRORS","this","state","script","isScullyGenerated","document","createElement","console","log","newStates","textContent","SCULLY","JSON","stringify","_injectScript","stateName","hasOwnProperty","setAttribute","appendChild","StyledLabel","label","props","to","style","styles","labelText","React","Component","fontSize","apiUrl","Users","useParams","useState","users","setUsers","currentUser","setCurrentUser","transferState","useEffect","fetchList","a","fetch","result","json","userList","setState","user","fetchUser","name","email","map","u","key","App","path","component","About","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.33af96e1.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 49;","export const TRANSFER_STATE_ERRORS = {\n  NOT_AN_OBJECT: 'State must be an object',\n  NO_STATES: 'You must provide a state to set',\n  NONEXISTING_STATE: `The state hasn't been set`\n}\n\nexport const SCULLY_SCRIPT = {\n  ID: 'ScullyIO-transfer-state',\n  START: '/** ___SCULLY_STATE_START___ */',\n  END: '/** ___SCULLY_STATE_END___ */'\n}\n","import {isScullyGenerated} from '@scullyio/ng-lib';\nimport {\n  TRANSFER_STATE_ERRORS as ERRORS,\n  SCULLY_SCRIPT as SCULLY\n} from './constants';\n\nexport default class TransferStateService {\n  constructor(initialState) {\n    if (initialState && typeof initialState !== 'object') throw ERRORS.NOT_AN_OBJECT;\n\n    this.state = initialState || null;\n    this.script = isScullyGenerated() ?\n      document.createElement('script') :\n      {};\n    console.log('isScullyGenerated', isScullyGenerated())\n  }\n\n  setState (newStates) {\n    if (!newStates) throw ERRORS.NO_STATES;\n    if (typeof newStates !== 'object') throw ERRORS.NOT_AN_OBJECT;\n\n    this.state = {\n      ...this.state,\n      ...newStates\n    };\n    \n    this.script.textContent = `window['${SCULLY.ID}']=${SCULLY.START}${JSON.stringify(\n      this.state\n    )}${SCULLY.END}`;\n\n    if (isScullyGenerated()) this._injectScript();\n  }\n\n  getState (stateName) {\n    if (!this.state.hasOwnProperty(stateName)) throw ERRORS.NONEXISTING_STATE;\n    return this.state[stateName];\n  }\n\n  _injectScript () {\n    this.script.setAttribute('id', SCULLY.ID);\n    document.appendChild(this.script);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nclass StyledLabel extends React.Component {\n  render() {\n    const {label} = this.props;\n\n    return (\n      <Link to=\"/about\">\n        <span style={styles.labelText}>{label}</span>\n      </Link>\n    );\n  }\n}\n\nconst styles = {\n  labelText: {\n    fontSize: 36,\n  },\n};\n\nStyledLabel.propTypes = {\n  classes: PropTypes.string,\n};\n\nexport default StyledLabel;\n","export const apiUrl = 'http://localhost:8200';\n","import React, {useState, useEffect} from 'react';\nimport {useParams, Link} from 'react-router-dom';\nimport {isScullyGenerated} from '@scullyio/ng-lib';\nimport TransferStateService from '../helpers/transfer-state.service'\nimport StyledLabel from '../components/StyledLabel';\nimport {apiUrl} from '../config';\n\nexport default function Users() {\n  const {id} = useParams();\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const transferState = new TransferStateService();\n\n  useEffect(() => {\n    const fetchList = async () => {\n      const result = await fetch(`${apiUrl}/users`);\n      const userList = await result.json();\n      setUsers(userList);\n\n      transferState.setState({ userList });\n    };\n\n    const fetchUser = async () => {\n      const result = await fetch(`${apiUrl}/users/${id}`);\n      const user = await result.json();\n      setCurrentUser(user);\n\n      // user = isScullyGenerated()\n      // ? this.transferState.getState<User>('user')\n      // : this.apiUser$.pipe(tap(user => this.transferState.setState('user', user)));\n\n    };\n\n    id ? fetchUser() : fetchList();\n  }, [id]);\n\n  return (\n    <div>\n      {!id ? (\n        <>\n          <h2>Users List</h2>\n          <ul>\n            {users.map(u => (\n              <li key={u.id}>\n                <Link to={`/users/${u.id}`}>{`${u.name} -  ${u.email}`}</Link>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <>\n          <h2>Users - user id: {id}</h2>\n          {currentUser && <h2>{`${currentUser.name} - ${currentUser.email}`}</h2>}\n          <StyledLabel label=\"go to about\" />\n        </>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport Users from './modules/Users';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/users/:id\" component={Users} />\n          <Route path=\"/users\" component={Users} />\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => <h2>Home</h2>;\n\nfunction About() {\n  return <h2>About</h2>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
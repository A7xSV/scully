{"version":3,"sources":["components/StyledLabel.js","config.js","modules/Users.js","App.js","serviceWorker.js","index.js"],"names":["StyledLabel","label","this","props","to","style","styles","labelText","React","Component","fontSize","apiUrl","Users","id","useParams","useState","users","setUsers","currentUser","setCurrentUser","useEffect","fetchList","a","fetch","result","json","userList","user","fetchUser","name","email","map","u","key","App","path","component","About","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAIMA,E,uKACM,IACDC,EAASC,KAAKC,MAAdF,MAEP,OACE,kBAAC,IAAD,CAAMG,GAAG,UACP,0BAAMC,MAAOC,EAAOC,WAAYN,Q,GANdO,IAAMC,WAY1BH,EAAS,CACbC,UAAW,CACTG,SAAU,KAQCV,IC1BFW,EAAS,wBCKP,SAASC,IAAS,IACxBC,EAAMC,cAAND,GADuB,EAEJE,mBAAS,IAFL,mBAEvBC,EAFuB,KAEhBC,EAFgB,OAGQF,mBAAS,MAHjB,mBAGvBG,EAHuB,KAGVC,EAHU,KAqB9B,OAhBAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,GAAD,OAAIZ,EAAJ,WADV,cACVa,EADU,gBAEOA,EAAOC,OAFd,OAEVC,EAFU,OAGhBT,EAASS,GAHO,2CAAH,qDAYfb,EANe,uCAAG,8BAAAS,EAAA,sEACKC,MAAM,GAAD,OAAIZ,EAAJ,kBAAoBE,IAD9B,cACVW,EADU,gBAEGA,EAAOC,OAFV,OAEVE,EAFU,OAGhBR,EAAeQ,GAHC,2CAAH,oDAMVC,GAAcP,MAClB,IAGD,6BACIR,EAUA,oCACE,gDAAsBA,GACrBK,GAAe,sCAAQA,EAAYW,KAApB,cAA8BX,EAAYY,QAC1D,kBAAC,EAAD,CAAa7B,MAAM,iBAZrB,oCACE,0CACA,4BACGe,EAAMe,KAAI,SAAAC,GAAC,OACV,wBAAIC,IAAKD,EAAEnB,IAAX,UAAmBmB,EAAEH,KAArB,eAAgCG,EAAEF,cC7BjC,SAASI,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAM9B,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWxB,IACpC,kBAAC,IAAD,CAAOuB,KAAK,SAASC,UAAWxB,IAChC,kBAAC,IAAD,CAAOuB,KAAK,KACV,kBAAC,EAAD,UAQZ,IAAMG,EAAO,kBAAM,qCAEnB,SAASD,IACP,OAAO,qCC1BWE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06b84232.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nclass StyledLabel extends React.Component {\n  render() {\n    const {label} = this.props;\n\n    return (\n      <Link to=\"/about\">\n        <span style={styles.labelText}>{label}</span>\n      </Link>\n    );\n  }\n}\n\nconst styles = {\n  labelText: {\n    fontSize: 36,\n  },\n};\n\nStyledLabel.propTypes = {\n  classes: PropTypes.string,\n};\n\nexport default StyledLabel;\n","export const apiUrl = 'http://localhost:8200';\n","import React, {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\nimport StyledLabel from '../components/StyledLabel';\nimport {apiUrl} from '../config';\n\nexport default function Users() {\n  const {id} = useParams();\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const fetchList = async () => {\n      const result = await fetch(`${apiUrl}/users`);\n      const userList = await result.json();\n      setUsers(userList);\n    };\n\n    const fetchUser = async () => {\n      const result = await fetch(`${apiUrl}/users/${id}`);\n      const user = await result.json();\n      setCurrentUser(user);\n    };\n\n    id ? fetchUser() : fetchList();\n  }, []);\n\n  return (\n    <div>\n      {!id ? (\n        <>\n          <h2>Users List</h2>\n          <ul>\n            {users.map(u => (\n              <li key={u.id}>{`${u.name} -  ${u.email}`}</li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <>\n          <h2>Users - user id: {id}</h2>\n          {currentUser && <h2>{`${currentUser.name} - ${currentUser.email}`}</h2>}\n          <StyledLabel label=\"go to about\" />\n        </>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport Users from './modules/Users';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/users/:id\" component={Users} />\n          <Route path=\"/users\" component={Users} />\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => <h2>Home</h2>;\n\nfunction About() {\n  return <h2>About</h2>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}